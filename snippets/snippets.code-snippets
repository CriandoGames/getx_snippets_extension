{
  "GetController Snippet": {
    "prefix": "getcontroller",
    "body": [
      "import 'import package:get/get.dart';",
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:Name}Controller extends RxController {",
      "",
      "\t final $1Repository repository;",
      "",
      "\t $1Controller({@required this.repository}) : assert(repository != null)",
      "",
      "\t final String text = 'hello'.obs;",
      "",
      "\t set text(value) => text.value = value;",
      "\t get text => this.text.value;",
      "}"
    ],
    "description": "Generate GetController."
  },
  "GetRoutes Snippet": {
    "prefix": "getroutes",
    "body": [
      "import 'import package:get/get.dart';",
      "",
      "class MyRoutes {",
      "",
      "static final routes = {",
      "\t '/' : GetRoute(page: MyHomePage()),",
      "\t '/second' : GetRoute(page: SecondPage()),",
      "};",
      "}"
    ],
    "description": "Generate GetRoutes."
  },
  "GetPage Snippet": {
    "prefix": "getpage",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "import 'package:http/http.dart' as http;",
      "",
      "class ${1:Name}Page extends StatelessWidget {",
      "",
      "//final $1Repository repository = $1Repository(apiClient: apiClient(httpClient: http.Client()));",
      "",
      "@override",
      "Widget build(BuildContext context) {",
      "",
      "return Scaffold(",
      "appBar: AppBar(title: Text('$1')),",
      "",
      "body: ${2:Container}(",
      "\t child: GetX<$1Controller>(",
      "\t\t builder: (_){",
      "\t\t\t return ${3:Container}();",
      "\t\t }",
      "\t\t),",
      "\t),",
      ");",
      "}"
    ],
    "description": "Generate Page."
  },
  "GetModel Snippet": {
    "prefix": "getmodel",
    "body": [
      "class ${1:Model} {",
      "",
      "int id;",
      "String name;",
      "",
      "$1({ id, name });",
      "",
      "$1.fromJson(Map<String, dynamic> json){",
      "\t\t id = json['id'];",
      "\t\t name = json['name'];",
      "}",
      "}",
      "",
      "Map<String, dynamic> toJson(){",
      "\t\t final Map<String, dynamic> data = new Map<String, dynamic>();",
      "\t\t data['name'] = this.name;",
      "\t\t return data;",
      "}",
    ],
    "description": "Generate file Model."
  },
  "GetProvider Snippet": {
    "prefix": "getprovider",
    "body": [
      "import 'dart:convert';",
      "import 'package:http/http.dart' as http;",
      "import 'package:meta/meta.dart';",
      "",
      "const baseUrl = 'htt://your-api.com/api' ;",
      "",
      "class ${1:Your}ApiClient {",
      "",
      "final http.Client httpClient;",
      "$1ApiClient({@required this.httpClient});",
      "",
      "",
      "getAll() async {",
      "\t\t try {",
      "\t\t\t\t var response = await httpClient.get(baseUrl);",
      "\t\t\t\t if(response.statusCode == 200){",
      "\t\t\t\t\t\t Map<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\t\t\t\t\t // TODO: implement methods!",
      "\t\t\t\t }else print ('erro -get');",
      "\t\t } catch(_){ }",
      "}",
      "",
      "getId(id) async {",
      "\t\t try {",
      "\t\t\t\t var response = await httpClient.get('$baseUrl$id');",
      "\t\t\t\t if(response.statusCode == 200){",
      "\t\t\t\t\t\t Map<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\t\t\t\t\t // TODO: implement methods!",
      "\t\t\t\t }else print ('erro -get');",
      "\t\t } catch(_){ }",
      "}",
      "",
      "add(obj) async{",
      "\t\t try {",
      "\t\t\t\t var response = await httpClient.post( baseUrl,", 
      "\t\t\t\t\t\t headers: {'Content-Type':'application/json'},",
      "\t\t\t\t\t\t body: jsonEncode(obj) );",
      "\t\t\t\t if(response.statusCode == 200){",
      "\t\t\t\t\t\t // TODO: implement methods!",
      "\t\t\t\t }else print ('erro -post'); ",
      "\t\t } catch(_){ }",
      "}",
      "",
      "edit(obj) async{",
      "\t\t try {",
      "\t\t\t\t var response = await httpClient.put( baseUrl,", 
      "\t\t\t\t\t\t headers: {'Content-Type':'application/json'},",
      "\t\t\t\t\t\t body: jsonEncode(obj) );",
      "\t\t\t\t if(response.statusCode == 200){",
      "\t\t\t\t\t\t // TODO: implement methods!",
      "\t\t\t\t }else print ('erro -post'); ",
      "\t\t } catch(_){ }",
      "}",
      "",
      "delete(obj) async{",
      "\t\t try {",
      "\t\t\t\t var response = await httpClient.delete( baseUrl);",
      "\t\t\t\t if(response.statusCode == 200){",
      "\t\t\t\t\t\t // TODO: implement methods!",
      "\t\t\t\t }else print ('erro -post'); ",
      "\t\t } catch(_){ }",
      "}",
      "",
      "}"
    ],
    "description": "Generate Provider file"
  },
  "GetRepository Snippet": {
    "prefix": "getrepository",
    "body": [
      "import 'package:get/get.dart';",
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:Your}Repository {",
      "final YourApiClient yourApiClient;",
      "$1Repository({@required this.yourApiClient}) : assert(yourApiClient != null);",
      "",
      "getAll(){",
      "\t\t return youApiClient.getAll();",
      "}",
      "getId(id){",
      "\t\t return youApiClient.getId(id);",
      "}",
      "delete(id){",
      "\t\t return youApiClient.delete(id);",
      "}",
      "edit(obj){",
      "\t\t return youApiClient.edit( obj );",
      "}",
      "add(obj){",
      "\t\t return youApiClient.add( obj );",
      "}",
      "",
      "}"
    ],
    "description": "Generate Repository file."
  },
  "GetMain Snippet": {
    "prefix": "getmain",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "import 'routes/routes.dart';",
      "import 'pages/home/home.dart';",
      "void main() {",
        "\t\t runApp(",
        "\t\t  GetMaterialApp(",
          "\t\t\t namedRoutes: MyRoutes.routes,",
            "\t\t\t debugShowCheckedModeBanner: false,",
            "\t\t\t home: HomePage(),",
          "\t\t\t )",
        "\t\t);",
      "\t}",
    ],
    "description": "Replace Main file."
  },
}