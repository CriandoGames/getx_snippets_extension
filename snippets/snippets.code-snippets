{
  "GetController Snippet": {
    "prefix": "getcontroller",
    "body": [
      "import 'package:get/get.dart';",
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:Name}Controller extends RxController {",
      "",
      "\tfinal YourRepository repository;",
      "\t$1Controller({@required this.repository}) : assert(repository != null);",
      "",
      "\tfinal _text = 'hello'.obs;",
      "",
      "\tset text(value) => this._text.value = value;",
      "\tget text => this._text.value;",
      "}"
    ],
    "description": "Generate GetController."
  },
  "GetRoutes Snippet": {
    "prefix": "getroutes",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class MyRoutes {",
      "",
      "\tstatic final routes = {",
      "\t\t'/' : GetRoute(page: MyHomePage()),",
      "\t\t'/second' : GetRoute(page: SecondPage()),",
      "\t};",
      "}"
    ],
    "description": "Generate GetRoutes."
  },
  "GetPage Snippet": {
    "prefix": "getpage",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "import 'package:http/http.dart' as http;",
      "",
      "class ${1:Name}Page extends StatelessWidget {",
      "",
      "//repository injection",
      "//final YourRepository repository = $1Repository(apiClient: apiClient(httpClient: http.Client()));",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "",
      "\t\treturn Scaffold(",
      "\t\tappBar: AppBar(title: Text('$1')),",
      "",
      "\t\tbody: ${2:Container}(",
      "\t\t\tchild: GetX<YourController>(",
      "\t\t\t\tbuilder: (_){",
      "\t\t\t\t\treturn ${3:Container}();",
      "\t\t\t\t}),",
      "\t\t\t),",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Generate Page."
  },
  "GetModel Snippet": {
    "prefix": "getmodel",
    "body": [
      "class ${1:Model} {",
      "",
      "\tint id;",
      "\tString name;",
      "",
      "\t$1({ id, name });",
      "",
      "\t$1.fromJson(Map<String, dynamic> json){",
      "\t\t\tid = json['id'];",
      "\t\t\tname = json['name'];",
      "\t}",
      "",
      "\tMap<String, dynamic> toJson(){",
      "\t\tfinal Map<String, dynamic> data = new Map<String, dynamic>();",
      "\t\tdata['name'] = this.name;",
      "\t\treturn data;",
      "\t}",
      "}",
    ],
    "description": "Generate file Model."
  },
  "GetProvider Snippet": {
    "prefix": "getprovider",
    "body": [
      "import 'dart:convert';",
      "import 'package:http/http.dart' as http;",
      "import 'package:meta/meta.dart';",
      "",
      "const baseUrl = 'http://localhost/api/' ;",
      "",
      "class ${1:Your}ApiClient {",
      "",
      "final http.Client httpClient;",
      "$1ApiClient({@required this.httpClient});",
      "",
      "",
      "getAll() async {",
      "\ttry {",
      "\t\tvar response = await httpClient.get(baseUrl);",
      "\t\tif(response.statusCode == 200){",
      "\t\t\tMap<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -get');",
      "\t} catch(_){ }",
      "}",
      "",
      "getId(id) async {",
      "\ttry {",
      "\t\t\tvar response = await httpClient.get('$baseUrl$id');",
      "\t\tif(response.statusCode == 200){",
      "\t\t\tMap<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -get');",
      "\t} catch(_){ }",
      "}",
      "",
      "add(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.post( baseUrl,",
      "\t\t\theaders: {'Content-Type':'application/json'},",
      "\t\t\tbody: jsonEncode(obj) );",
      "\t\tif(response.statusCode == 200){",
      "\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "edit(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.put( baseUrl,",
      "\t\t\theaders: {'Content-Type':'application/json'},",
      "\t\t\tbody: jsonEncode(obj) );",
      "\t\tif(response.statusCode == 200){",
      "\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "delete(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.delete( baseUrl);",
      "\t\t\tif(response.statusCode == 200){",
      "\t\t\t\t// TODO: implement methods!",
      "\t\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "}"
    ],
    "description": "Generate Provider file"
  },
  "GetRepository Snippet": {
    "prefix": "getrepository",
    "body": [
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:Your}Repository {",
      "",
      "// final YourApiClient yourApiClient;",
      "",
      "$1Repository({@required this.yourApiClient}) : assert(yourApiClient != null);",
      "",
      "getAll(){",
      "\treturn youApiClient.getAll();",
      "}",
      "getId(id){",
      "\treturn youApiClient.getId(id);",
      "}",
      "delete(id){",
      "\treturn youApiClient.delete(id);",
      "}",
      "edit(obj){",
      "\treturn youApiClient.edit( obj );",
      "}",
      "add(obj){",
      "\t\treturn youApiClient.add( obj );",
      "}",
      "",
      "}"
    ],
    "description": "Generate Repository file."
  },
  "GetMain Snippet": {
    "prefix": "getmain",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "",
      "void main() {",
      "\trunApp(",
      "\t\tGetMaterialApp(",
      "\t\t\t\tdebugShowCheckedModeBanner: false,",
      "\t\t\t\thome: MyHomePage(),",
      "\t\t)",
      "\t);",
      "}",
    ],
    "description": "Replace Main file."
  },
  "GetGet Snippet": {
    "prefix": "getget",
    "body": [
      "get ${1:value} => this._$1.value;",
    ],
    "description": "Generate get value."
  },
  "GetSet Snippet": {
    "prefix": "getset",
    "body": [
      "set ${1:value}(value) => this._$1.value = value;",
    ],
    "description": "Generate set value."
  },
  "GetFinal Snippet": {
    "prefix": "getfinal",
    "body": [
      "",
      "final _${1:value} = .obs;",
      "",
      "get $1 => this._$1.value;",
      "",
      "set $1(value) => this._$1.value = value;",
      "",
    ],
    "description": "Generate final, get and setter. "
  },
}