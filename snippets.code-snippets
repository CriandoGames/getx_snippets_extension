{
  "GetController Snippet": {
    "prefix": "getcontroller",
    "body": [
      "import 'package:get/get.dart';",
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:My}Controller extends RxController {",
      "",
      "\tfinal ${2:My}Repository repository;",
      "\t$1Controller({@required this.repository}) : assert(repository != null);",
      "",
      "\tfinal _${3:obj} = ''.obs;",
      "\tset $3(value) => this._$3.value = value;",
      "\tget $3 => this._$3.value;",
      "}"
    ],
    "description": "Generate GetController."
  },
  "GetRoutes Snippet": {
    "prefix": "getroutespages",
    "body": [
      "import 'package:get/get.dart';",
      "",
      "class MyRoutes {",
      "",
      "\tstatic final routes = [",
      "\t\tGetPage(name: '/', page:()=> MyHomePage(),)",
      "\t];",
      "}"
    ],
    "description": "Generate file routes."
  },
  "GetRoute Snippet": {
    "prefix": "getroutepage",
    "body": [
      "GetPage(name: '/${1:myRoute}', page:()=> ${2:My}Page()),",
    ],
    "description": "Generate route."
  },
  "GetArgs Snippet": {
    "prefix": "getargs",
    "body": [
      "Get.arguments${1:['']};",
    ],
    "description": "Generate Get.arguments['']."
  },
  "GetPage Snippet": {
    "prefix": "getpage",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "import 'package:http/http.dart' as http;",
      "",
      "class ${1:My}Page extends StatelessWidget {",
      "",
      "//repository injection",
      "final ${2:My}Repository repository = $2Repository(apiClient: ${6:My}ApiClient(httpClient: http.Client()));",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "",
      "\t\treturn Scaffold(",
      "\t\tappBar: AppBar(title: Text('$1Page')),",
      "",
      "\t\tbody: ${3:Container}(",
      "\t\t\tchild: GetX<${4:My}Controller>(",
      "\t\t\t\tinit: $4Controller(repository: repository),",
      "\t\t\t\tbuilder: (_){",
      "\t\t\t\t\treturn ${5:Container}();",
      "\t\t\t\t}),",
      "\t\t\t),",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Generate Page."
  },
  "GetModel Snippet": {
    "prefix": "getmodel",
    "body": [
      "class ${1:My}Model {",
      "",
      "\tint id;",
      "\tString name;",
      "",
      "\t$1Model({ id, name });",
      "",
      "\t$1Model.fromJson(Map<String, dynamic> json){",
      "\t\t\tthis.id = json['id'];",
      "\t\t\tthis.name = json['name'];",
      "\t}",
      "",
      "\tMap<String, dynamic> toJson(){",
      "\t\tfinal Map<String, dynamic> data = new Map<String, dynamic>();",
      "\t\tdata['name'] = this.name;",
      "\t\treturn data;",
      "\t}",
      "}",
    ],
    "description": "Generate file Model."
  },
  "GetProvider Snippet": {
    "prefix": "getprovider",
    "body": [
      "import 'dart:convert';",
      "import 'package:http/http.dart' as http;",
      "import 'package:meta/meta.dart';",
      "",
      "const baseUrl = 'http://gerador-nomes.herokuapp.com/nomes/10';",
      "",
      "class ${1:My}ApiClient {",
      "",
      "final http.Client httpClient;",
      "$1ApiClient({@required this.httpClient});",
      "",
      "",
      "getAll() async {",
      "\ttry {",
      "\t\tvar response = await httpClient.get(baseUrl);",
      "\t\tif(response.statusCode == 200){",
      "\t\t\tMap<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\tList<${2:MyModel}> list$2 = jsonResponse['data'].map<$2>((map) { ",
      "\t\t\t\t\treturn $2.fromJson(map);",
      "\t\t\t\t}).toList();",
      "\t\t\treturn list$2;",
      "\t\t}else print ('erro -get');",
      "\t} catch(_){ }",
      "}",
      "",
      "getId(id) async {",
      "\ttry {",
      "\t\t\tvar response = await httpClient.get('$baseUrl$id');",
      "\t\tif(response.statusCode == 200){",
      "\t\t\tMap<String, dynamic> jsonResponse = json.decode(response.body);",
      "\t\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -get');",
      "\t} catch(_){ }",
      "}",
      "",
      "add(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.post( baseUrl,",
      "\t\t\theaders: {'Content-Type':'application/json'},",
      "\t\t\tbody: jsonEncode(obj) );",
      "\t\tif(response.statusCode == 200){",
      "\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "edit(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.put( baseUrl,",
      "\t\t\theaders: {'Content-Type':'application/json'},",
      "\t\t\tbody: jsonEncode(obj) );",
      "\t\tif(response.statusCode == 200){",
      "\t\t\t// TODO: implement methods!",
      "\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "delete(obj) async{",
      "\ttry {",
      "\t\tvar response = await httpClient.delete( baseUrl);",
      "\t\t\tif(response.statusCode == 200){",
      "\t\t\t\t// TODO: implement methods!",
      "\t\t\t}else print ('erro -post'); ",
      "\t} catch(_){ }",
      "}",
      "",
      "}"
    ],
    "description": "Generate Provider file"
  },
  "GetProviderDio Snippet": {
    "prefix": "getproviderdio",
    "body": [
      "import 'dart:convert';",
      "import 'package:dio/dio.dart';",
      "import 'package:meta/meta.dart';",
      "",
      "const baseUrl = 'http://gerador-nomes.herokuapp.com/nomes/10';",
      "",
      "class ${1:My}ApiClient {",
      "",
      "final Dio httpClient;",
      "$1ApiClient({@required this.httpClient});",
      "",
      "",
      "getAll() async {",
      "\ttry {",
      "\t\tvar response = await httpClient.get(baseUrl);",
      "\t\tif(response.statusCode == 200){",
      "\t\t\tMap<String, dynamic> jsonResponse = json.decode(response.data);",
      "\t\t\t\tList<${2:MyModel}> list$2 = jsonResponse['data'].map<$2>((map) { ",
      "\t\t\t\t\treturn $2.fromJson(map);",
      "\t\t\t\t}).toList();",
      "\t\t\treturn list$2;",
      "\t\t}else print ('erro -get');",
      "\t} catch(_){ }",
      "}",
      "",
      "}"
    ],
    "description": "Generate Provider dio file"
  },
  "GetRepository Snippet": {
    "prefix": "getrepository",
    "body": [
      "import 'package:meta/meta.dart';",
      "",
      "class ${1:My}Repository {",
      "",
      "final ${2:My}ApiClient apiClient;",
      "",
      "$1Repository({@required this.apiClient}) : assert(apiClient != null);",
      "",
      "getAll(){",
      "\treturn apiClient.getAll();",
      "}",
      "getId(id){",
      "\treturn apiClient.getId(id);",
      "}",
      "delete(id){",
      "\treturn apiClient.delete(id);",
      "}",
      "edit(obj){",
      "\treturn apiClient.edit( obj );",
      "}",
      "add(obj){",
      "\t\treturn apiClient.add( obj );",
      "}",
      "",
      "}"
    ],
    "description": "Generate Repository file."
  },
  "GetMain Snippet": {
    "prefix": "getmain",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "",
      "void main() {",
      "\trunApp(",
      "\t\tGetMaterialApp(",
      "\t\t\t\tdebugShowCheckedModeBanner: false,",
      "\t\t\t\tdefaultTransition: Transition.fade,",
      "\t\t\t\tgetPages: MyRoutes.routes,",
      "\t\t\t\thome: MyHomePage(),",
      "\t\t)",
      "\t);",
      "}",
    ],
    "description": "Replace Main file."
  },
  "GetGet Snippet": {
    "prefix": "getget",
    "body": [
      "get ${1:value} => this._$1.value;",
    ],
    "description": "Generate get value."
  },
  "GetSet Snippet": {
    "prefix": "getset",
    "body": [
      "set ${1:value}(value) => this._$1.value = value;",
    ],
    "description": "Generate set value."
  },
  "GetFinal Snippet": {
    "prefix": "getfinal",
    "body": [
      "",
      "final _${1:value} = .obs;",
      "",
      "get $1 => this._$1.value;",
      "",
      "set $1(value) => this._$1.value = value;",
      "",
    ],
    "description": "Generate final, get and setter. "
  },
  "GetXList Snippet": {
    "prefix": "getxlist",
    "body": [
      "",
      "GetX<${1:My}Controller>(",
      "",
      "\t//autoRemove: false,",
      "\t//assignId: false,",
      "\tinit: $1Controller(repository : repository),",
      "\tinitState: (state){ Get.find<$1Controller>().obj = 'fast code get snittpets' ;},",
      "\tbuilder: (_) {",
      "\t\treturn",
      "\t\t_.obj.isEmpty ?",
      "\t\t\t Center(child: CircularProgressIndicator());",
      "\t\t:",
      "\t\tListView.separated(",
      "\t\tseparatorBuilder: (context, index) => Divider(height: 1,),",
      "\t\titemCount: 5,",
      "\t\titemBuilder: (context, index){",
      "\t\t\treturn ListTile(",
      "\t\t\t\tonTap :(){},",
      "\t\t\t\ttitle: Text(_.obj),",
      "\t\t\t\tsubtitle: Text(index.toString()),",
      "\t\t\t);",
      "\t\t})",
      "\t}",
      ")"
    ],
    "description": "Generates a ListView with GetX widget, fully functional. "
  },
  "GetXListDismissible Snippet": {
    "prefix": "getxlistdismissible",
    "body": [
      "",
      "GetX<${1:My}Controller>(",
      "",
      "\t//autoRemove: false,",
      "\t//assignId: false,",
      "\tinit: $1Controller(repository : repository),",
      "\tinitState: (state){ Get.find<$1Controller>().obj = 'fast code get snittpets' ;},",
      "\tbuilder: (_) {",
      "\t\treturn",
      "\t\t_.obj.isEmpty ?",
      "\t\t\t Center(child: CircularProgressIndicator());",
      "\t\t:",
      "\t\tListView.builder(",
      "\t\titemCount: 5,",
      "\t\titemBuilder: (context, index){",
      "\t\t\treturn Dismissible(",
      "\t\t\t\tonDismissed: (direction){ direction == DismissDirection.endToStart ? _.${2:remove}() : _.${3:edit}() },",
      "\t\t\t\tdirection: DismissDirection.horizontal,",
      "\t\t\t\tbackground: Container(",
      "\t\t\t\t\tcolor: Colors.green,",
      "\t\t\t\t\tchild: Align(",
      "\t\t\t\t\t\talignment: Alignment(-0.9, 0),",
      "\t\t\t\t\t\tchild: Icon(Icons.edit, color: Colors.white),",
      "\t\t\t\t\t),",
      "\t\t\t\t),",
      "\t\t\t\tsecondaryBackground: Container(",
      "\t\t\t\t\tcolor: Colors.red,",
      "\t\t\t\t\tchild: Align(",
      "\t\t\t\t\t\talignment: Alignment(0.9, 0),",
      "\t\t\t\t\t\tchild: Icon(Icons.delete, color: Colors.white),",
      "\t\t\t\t\t),",
      "\t\t\t\t),",
      "\t\t\t\tkey: UniqueKey(),",
      "\t\t\t\tchild: ListTile(",
      "\t\t\t\t\tonTap:(){},",
      "\t\t\t\t\ttitle: Text(_.obj),",
      "\t\t\t\t\tsubtitle: Text(index.toString()),",
      "\t\t\t\t),",
      "\t\t\t);",
      "\t\t})",
      "\t}",
      ")"
    ],
    "description": "Generates a ListView with GetX and Dismissible widget, fully functional."
  },
  "GetMyWidget Snippet": {
    "prefix": "getmywidget",
    "body": [
      "${1:MyCustomWidget}($2),",
    ],
    "description": "Instance of your custom component. "
  },
  "GetButton Snippet": {
    "prefix": "getbutton",
    "body": [
      "",
      "RaisedButton(",
      "\tcolor: ${1:Colors.blue},",
      "\tonPressed: ()=> _.${2:function},",
      "\tsplashColor: ${3:Colors.blueGrey},",
      "\tchild: Text('${4:OK}',",
      "\t\tstyle: TextStyle(",
      "\t\t\tcolor: ${5:Colors.white},",
      "\t\t\tfontSize: ${6:16},",
      "\t\t),",
      "\t),",
      "),",
    ],
    "description": "Generates a Standard RaisedButtom with its attributes. "
  },
  "GetButtonWidget Snippet": {
    "prefix": "getbuttonwidget",
    "body": [
      "import 'package:flutter/material.dart';",
      "class CustomButton extends StatelessWidget {",
      "\tfinal Function function;",
      "\tfinal String text;",
      "\tfinal Color color;",
      "\tfinal Color textColor;",
      "\tfinal Color splashColor;",
      "\tfinal double fontSize;",
      "",
      "\tCustomButton({",
      "\t\t@required this.function,",
      "\t\t@required this.text,",
      "\t\tthis.splashColor = Colors.blueGrey,",
      "\t\tthis.fontSize = 16,",
      "\t\tthis.color = Colors.blue,",
      "\t\tthis.textColor = Colors.white,",
      "\t});",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn RaisedButton(",
      "\t\t\tsplashColor: this.splashColor,",
      "\t\t\tonPressed: ()=> this.function,",
      "\t\t\tcolor: this.color,",
      "\t\t\tchild: Text(",
      "\t\t\t\tthis.text,",
      "\t\t\t\tstyle: TextStyle(",
      "\t\t\t\t\tcolor: this.textColor,",
      "\t\t\t\t\tfontSize: this.fontSize,",
      "\t\t\t\t),",
      "\t\t\t),",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Generate a stateless class with a RaisedButton that can be reused by more than one widget."
  },
  "GetFAB Snippet": {
    "prefix": "getfab",
    "body": [
      "",
      "FloatingActionButton(",
      "\tonPressed: () {},",
      "\tchild: Icon(",
      "\t\tIcons.add,",
      "\t\tcolor: Colors.white,",
      "\t),",
      "\tbackgroundColor: Colors.blue,",
      "),",
    ],
    "description": "Generates a Standard FloatingActionButton with its attributes. "
  },
  "GetFABWidget Snippet": {
    "prefix": "getfabwidget",
    "body": [
      "import 'package:flutter/material.dart';",
      "class CustomFAB extends StatelessWidget {",
      "\tfinal Function function;",
      "\tfinal Color bgColor;",
      "\tfinal Color iconColor;",
      "\tfinal Color splashColor;",
      "\tfinal double fontSize;",
      "\tfinal Icon icon;",
      "",
      "\tCustomFAB({",
      "\t\t@required this.function,",
      "\t\t@required this.icon,",
      "\t\tthis.iconColor = Colors.white,",
      "\t\tthis.splashColor = Colors.blueGrey,",
      "\t\tthis.fontSize = 16,",
      "\t\tthis.bgColor = Colors.blue,",
      "\t});",
      "",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\treturn FloatingActionButton(",
      "\t\t\tsplashColor: this.splashColor,",
      "\t\t\tonPressed: ()=> this.function,",
      "\t\t\tbackgroundColor: this.bgColor,",
      "\t\t\tchild: this.icon",
      "\t\t);",
      "\t}",
      "}"
    ],
    "description": "Generate a stateless class with a FloatingActionButton that can be reused by more than one widget."
  },
  "GetForm Snippet": {
    "prefix": "getxformwidget",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:get/get.dart';",
      "import 'package:validators/validators.dart';",
      "",
      "class ${1:Custom}Form extends StatelessWidget {",
      "\t@override",
      "\tWidget build(BuildContext context) {",
      "\t\tfinal GlobalKey key =  GlobalKey<FormState>();",
      "\t\treturn GetX<${2:My}Controller>(",
      "\t\t\tassignId: true,",
      "\t\t\tbuilder: (_){",
      "\t\t\t\treturn Form(",
      "\t\t\t\t\tkey: key,",
      "\t\t\t\t\tchild: Column(",
      "\t\t\t\t\t\tchildren: <Widget>[",
      "\t\t\t\t\t\t\tTextFormField(",
      "\t\t\t\t\t\t\t\tkeyboardType: TextInputType.emailAddress,",
      "\t\t\t\t\t\t\t\tonSaved: (value) => _.user.email = value,",
      "\t\t\t\t\t\t\t\tdecoration: InputDecoration(labelText: 'Email'),",
      "\t\t\t\t\t\t\t\tenableSuggestions: true,",
      "\t\t\t\t\t\t\t\tmaxLength: 32,",
      "\t\t\t\t\t\t\t\tstyle: TextStyle(fontSize: 20),",
      "\t\t\t\t\t\t\t\tvalidator: (value) {",
      "\t\t\t\t\t\t\t\t\tif (!isEmail(value)) {",
      "\t\t\t\t\t\t\t\t\t\treturn 'Insira um email válido';",
      "\t\t\t\t\t\t\t\t\t} else return null;",
      "\t\t\t\t\t\t\t\t},",
      "\t\t\t\t\t\t\t),",
      "\t\t\t\t\t\t\tTextFormField(",
      "\t\t\t\t\t\t\t\tkeyboardType: TextInputType.text,",
      "\t\t\t\t\t\t\t\tonSaved: (value) => _.user.password = value,",
      "\t\t\t\t\t\t\t\tdecoration: InputDecoration(labelText: 'Senha'),",
      "\t\t\t\t\t\t\t\tenableSuggestions: true,",
      "\t\t\t\t\t\t\t\tobscureText: true,",
      "\t\t\t\t\t\t\t\tmaxLength: 20,",
      "\t\t\t\t\t\t\t\tstyle: TextStyle(fontSize: 20),",
      "\t\t\t\t\t\t\t\tvalidator: (value) {",
      "\t\t\t\t\t\t\t\t\tif (value.isEmpty) {",
      "\t\t\t\t\t\t\t\t\t\treturn 'Insira uma senha';",
      "\t\t\t\t\t\t\t\t\t} else if (value.length < 5) {",
      "\t\t\t\t\t\t\t\t\t\treturn 'Insira uma senha maior';",
      "\t\t\t\t\t\t\t\t\t} else return null;",
      "\t\t\t\t\t\t\t\t}",
      "\t\t\t\t\t\t\t),",
      "\t\t\t\t\t\t\tRaisedButton(",
      "\t\t\t\t\t\t\t\tonPressed: (){",
      "\t\t\t\t\t\t\t\t\tfinal FormState form = key.currentState;",
      "\t\t\t\t\t\t\t\t\tform.validate()",
      "\t\t\t\t\t\t\t\t\t? form.save()",
      "\t\t\t\t\t\t\t\t\t: print('erro ao logar');",
      "\t\t\t\t\t\t\t\t\tprint(_.user.email);",
      "\t\t\t\t\t\t\t\t\tprint(_.user.password);",
      "\t\t\t\t\t\t\t\t\t_.login();",
      "\t\t\t\t\t\t\t\t},",
      "\t\t\t\t\t\t\t\tchild: Text('OK'),",
      "\t\t\t\t\t\t\t)",
      "\t\t\t\t\t\t],",
      "\t\t\t\t\t),",
      "\t\t\t\t);",
      "\t\t\t}",
      "\t\t);",
      "\t}",
      "}",
    ],
    "description": "Generate a stateless class with a Form that can be reused by more than one widget."
  },
}
